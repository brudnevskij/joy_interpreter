count (dup null (drop 0) (rest count 1 +) if) def
append(swap dup null (drop)(swap (uncons) dip append cons) if)def
uncons (dup first swap rest) def
map
(swap dup null
(swap drop)
(uncons ( swap dup) dip ()cons cons (cons () swap dip drop) dip i swap map cons)
 if)
 def

filter ( swap dup null
(swap drop)
(swap dup
(swap uncons
(dup (
swap cons
) dip swap cons
) dip
) dip filter swap dip swap (cons)(swap drop)if
)
if) def

qsort (dup null
(drop)
(dup uncons ((>) cons) dip swap filter (uncons swap dup ( (<) cons filter qsort)dip ) dip qsort )
if
) def

// ((1 2 3 4 5 6)(1 2 3 4 5 6)(1 2 3 4 5 6)) ((2 *)map)map ((8 <)filter)map





